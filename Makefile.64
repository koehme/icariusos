CC        = x86_64-elf-gcc
AS        = nasm

CFLAGS    = -ffreestanding -m64 -g -O0 \
            -Wall -Wextra -std=gnu23 \
            -fno-pic -fno-pie -fno-stack-protector \
            -mno-red-zone -mcmodel=kernel \
            -I ./src/x86_64/include

NASMFLAGS = -f elf64 -g -F dwarf 

LDFLAGS   = -nostdlib -T linker64.ld -Wl,--build-id=none -Wl,--gc-sections

SRCDIR_C  = src/x86_64
SRCDIR_S  = src/arch/x86_64
OBJDIR    = obj/x86_64
BINDIR    = bin/x86_64

KERNEL    = $(BINDIR)/ICARIUS.elf

CSRCS     = $(shell find $(SRCDIR_C) -type f -name '*.c')
ASMSRCS   = $(shell find $(SRCDIR_S) -type f -name '*.asm')

COBJS     = $(patsubst $(SRCDIR_C)/%.c, $(OBJDIR)/%.o, $(CSRCS))
ASMOBJS   = $(patsubst $(SRCDIR_S)/%.asm, $(OBJDIR)/%.o, $(ASMSRCS))
OBJS      = $(COBJS) $(ASMOBJS)

all: $(KERNEL)

$(KERNEL): $(OBJS)
	@mkdir -p $(dir $@)
	$(CC) $(LDFLAGS) -o $@ $^

$(OBJDIR)/%.o: $(SRCDIR_C)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJDIR)/%.o: $(SRCDIR_S)/%.asm
	@mkdir -p $(dir $@)
	$(AS) $(NASMFLAGS) $< -o $@

clean:
	rm -rf $(OBJDIR) $(KERNEL)

.PHONY: all clean